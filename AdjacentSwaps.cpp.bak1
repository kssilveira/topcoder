#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <streambuf>
#include <string>
#include <utility>
#include <vector>
 
#define rep(i, n) repb(i, 0, n)
#define repb(i, b, n) repbc(i, b, n, <)
#define repe(i, n) repbe(i, 0, n)
#define repbe(i, b, n) repbc(i, b, n, <=)
#define repbc(i, b, n, c) for(int i = b; i c n; i++)
 
using namespace std;

typedef unsigned long long ULL;

int n = 0;
vector<int> p;
vector<int> cur;
ULL COMB[55][55];

const ULL MOD = 1000000007;
 
class AdjacentSwaps {
	public:
	int theCount(vector <int> P) {
    memset( COMB, 0, sizeof( COMB));
     COMB[0][0] = 1;
    repb(i, 1, 50) {
       COMB[i][0] = COMB[i][i] = 1;
      repb(j, 1, i) {
         COMB[i][j] = COMB[i - 1][j - 1] + COMB[i - 1][j];
      }
    }
    /*
    rep(i, 10) {
      rep(j, 10) {
        cout << COMB[i][j] << " ";
      }
      cout << endl;
    }//*/

    p = P;
    n = (int) p.size();
    cur.clear();
    rep(i, n) {
      cur.push_back(i);
    }
    ULL res = solve(0, n - 1);
    res %= MOD;
    return (int) res;
	}
  ULL solve(int begin, int end) {
    printf("solve(%i, %i)\n", begin, end);

    ULL res = 0;

    printf("cur: ");
    rep(i, n) cout << cur[i] << " ";
    cout << endl;

    if (begin == end) {
      return cur[begin] == p[begin];
    }
    int left[55] = {0}, right[55] = {0};
    repb(i, begin, end + 1) {
      right[cur[i]] = 1;
    }
    repb(i, begin, end) {
      left[cur[i]] = false;
      left[cur[i + 1]] = true;
      right[cur[i]] = true;
      right[cur[i + 1]] = false;

      swap(cur[i], cur[i + 1]);

      bool valid = true;
      repb(j, begin, i + 1) {
        if (!left[p[j]]) {
          valid = false;
          break;
        }
      }
      if (valid) {
        repb(j, i + 1, end + 1) {
          if (!right[p[j]]) {
            valid = false;
            break;
          }
        }
      }

      if (valid) {
        printf("solve(%i, %i) -> combine(%i)\n", begin, end, i);
        res += (((solve(begin, i) * solve(i + 1, end)) % MOD) *
          comb(end - begin, i - begin)) % MOD;
        res %= MOD;
      }

      printf("solve(%i, %i) -> swap_back(%i)\n", begin, end, i);
      swap(cur[i], cur[i + 1]);

      left[cur[i]] = true;
      right[cur[i]] = false;
    }

    return res % MOD;
  }
  ULL comb(ULL x, ULL y) {
    if (x > y) return 0;
    return COMB[x][y];
  }
	
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const int &Expected, const int &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { int Arr0[] = {1, 2, 0}; vector <int> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1; verify_case(0, Arg1, theCount(Arg0)); }
	void test_case_1() { int Arr0[] = {0, 1}; vector <int> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; verify_case(1, Arg1, theCount(Arg0)); }
	void test_case_2() { int Arr0[] = {2, 0, 3, 1}; vector <int> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 2; verify_case(2, Arg1, theCount(Arg0)); }
	void test_case_3() { int Arr0[] = {1, 0, 3, 2}; vector <int> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; verify_case(3, Arg1, theCount(Arg0)); }
	void test_case_4() { int Arr0[] = {1, 3, 0, 5, 2, 7, 4, 8, 10, 6, 12, 9, 14, 11, 16, 13, 18, 15, 19, 17}; vector <int> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 716743312; verify_case(4, Arg1, theCount(Arg0)); }

// END CUT HERE

};
 
// BEGIN CUT HERE 
int main()
{
	AdjacentSwaps ___test; 
	___test.run_test(-1); 
} 
// END CUT HERE
